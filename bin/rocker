#!/usr/bin/env ruby

require "securerandom"
require "thor"
require "pry"
require "docker-rocker"

module DockerRocker
  class Cli < Thor

    desc "build", "Proxy to docker build that run preprocessor on Dockerfiles"
    option "file", aliases: "-f", desc: "Name of the Dockerfile", default: "Dockerfile"
    def build(*args)
      if options.file == "Dockerfile" && !File.exists?("Dockerfile")
        system("docker", "build", *args) # Ex: rocker build --help
      else
        begin
          temp_file = "Dockerfile-#{SecureRandom.hex(4)}"
          File.open(temp_file, "w") do |f|
            f.write DockerRocker::Engine.new(options.file).render
          end
          new_args = ["-f", temp_file] + args
          system("docker", "build", *new_args)
        ensure
          FileUtils.rm_f(temp_file)
        end
      end
    end

    desc "output", "Print to STDOUT a Dockerfile with rocker instructions evaluated."
    option :file, aliases: "-f", desc: "Name of the Dockerfile", default: "Dockerfile"
    def output
      puts DockerRocker::Engine.new(options.file).render
    end

    desc "registry", "Commands to help manage a Docker Registry"
    def registry
      require "docker_rocker/registry/garbage_collector"
      DockerRocker::Registry::GarbageCollector.new("registry.docker.aworks.us/", "us-east-1").call
    end

  end
end

DockerRocker::Cli.start(ARGV)
